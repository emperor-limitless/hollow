WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

// Access modifiers
access_modifier = { "public" | "private" }

// Import statement
import_stmt = {
    "import" ~
    identifier ~ "." ~
    "(" ~ identifier ~ ("," ~ identifier)* ~ ")" ~
    ";"
}

// String literals
string_literal = ${ "\"" ~ inner_string ~ "\"" }
inner_string = @{ (!("\"" | "\\") ~ ANY)* }

format_string = ${ "f\"" ~ format_string_content ~ "\"" }
format_string_content = @{
    (
        (!("{" | "\"") ~ ANY) |
        ("{" ~ identifier ~ "}")
    )*
}

// Numbers
number = @{ "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }

// Types
type = { identifier }

// Values that can be returned or assigned
value = {
    number |
    format_string |
    string_literal |
    function_call |
    member_access |
    identifier
}

// Expressions for operations
expr = { value ~ (operator ~ value)* }

operator = { "+" | "-" | "*" | "/" | "=" }

// Parameters with default values
parameter = { identifier ~ ":" ~ type ~ ("=" ~ value)? }
parameter_list = {
    "(" ~
    (parameter ~ ("," ~ parameter)*)? ~
    ")"
}

// Variable declarations with access modifiers
variable_decl = {
    access_modifier? ~
    ("var" | "let") ~
    identifier ~ ":" ~ type ~
    ("=" ~ value)? ~
    ";"
}

member_access = { ("self" | "super" | identifier) ~ ("." ~ identifier)* }

function_call = {
    (member_access | identifier) ~
    "(" ~
    (value ~ ("," ~ value)*)? ~
    ")"
}

// Statement types
statement = {
    variable_decl |
    member_access ~ "=" ~ value ~ ";" |
    function_call ~ ";" |
    value ~ ";"
}

block = {
    "{" ~
    statement* ~
    value? ~  // Allow a final value for implicit return
    "}"
}

// Function declaration with static and access modifiers
function_decl = {
    access_modifier? ~
    "static"? ~
    "fn" ~
    identifier ~
    parameter_list ~
    ("->" ~ type)? ~
    block
}

// Constructor
constructor_decl = {
    identifier ~ // must match class name
    parameter_list ~
    block
}

// Destructor
destructor_decl = {
    "~" ~ identifier ~
    block
}

// Class declaration
class_decl = {
    "class" ~
    identifier ~
    (":" ~ identifier)? ~
    "{" ~
    (
        variable_decl |
        function_decl |
        constructor_decl |
        destructor_decl
    )* ~
    "}"
}

// Program structure
program = {
    SOI ~
    (
        import_stmt |
        access_modifier ~ ";" |
        class_decl
    )* ~
    EOI
}
